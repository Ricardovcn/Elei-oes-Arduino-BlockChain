'''
    Este script deve ser executato logo após o ganache-cli ser executado.
    Se o ganache-cli for parado e iniciado novamente, este script deverá
    ser executado novamente.
'''


import json
from web3 import Web3
#from solc import compile_files, link_code, compile_standard, compile_source

w3 = Web3(Web3.HTTPProvider("http://127.0.0.1:8545"))

BYTECODE = '608060405234801561001057600080fd5b50610610806100206000396000f3006080604052600436106100615763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166311196c8d811461006657806364d2e0e41461016a5780636a98a57d146101965780639749e83714610234575b600080fd5b34801561007257600080fd5b5061007e600435610299565b604051808581526020018060200180602001848152602001838103835286818151815260200191508051906020019080838360005b838110156100cb5781810151838201526020016100b3565b50505050905090810190601f1680156100f85780820380516001836020036101000a031916815260200191505b50838103825285518152855160209182019187019080838360005b8381101561012b578181015183820152602001610113565b50505050905090810190601f1680156101585780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390f35b34801561017657600080fd5b50610182600435610409565b604080519115158252519081900360200190f35b3480156101a257600080fd5b5060408051602060046024803582810135601f810185900485028601850190965285855261023295833595369560449491939091019190819084018382808284375050604080516020601f89358b018035918201839004830284018301909452808352979a9998810197919650918201945092508291508401838280828437509497506104459650505050505050565b005b34801561024057600080fd5b506102496104f3565b60408051602080825283518183015283519192839290830191858101910280838360005b8381101561028557818101518382015260200161026d565b505050509050019250505060405180910390f35b60008181526020819052604081205460609081908390859082106102bc57600080fd5b600086815260208181526040918290206003810154600180830180548651600260001994831615610100028501909216829004601f81018890048802820188019098528781528d979296919095019492909301928591908301828280156103645780601f1061033957610100808354040283529160200191610364565b820191906000526020600020905b81548152906001019060200180831161034757829003601f168201915b5050855460408051602060026001851615610100026000190190941693909304601f8101849004840282018401909252818152959850879450925084019050828280156103f25780601f106103c7576101008083540402835291602001916103f2565b820191906000526020600020905b8154815290600101906020018083116103d557829003601f168201915b505050505091509450945094509450509193509193565b6000818152602081905260408120548290821061042557600080fd5b505060009081526020819052604090206003018054600190810190915590565b6040805160808101825284815260208082018581528284018590526001606084018190526000888152808452949094208351815590518051939491936104939392850192919091019061054c565b50604082015180516104af91600284019160209091019061054c565b506060919091015160039091015550506001805480820182556000919091527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf60155565b6060600180548060200260200160405190810160405280929190818152602001828054801561054157602002820191906000526020600020905b81548152602001906001019080831161052d575b505050505090505b90565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061058d57805160ff19168380011785556105ba565b828001600101855582156105ba579182015b828111156105ba57825182559160200191906001019061059f565b506105c69291506105ca565b5090565b61054991905b808211156105c657600081556001016105d05600a165627a7a723058207b7fe9aada9afaad10ffd4fff7610ff0a1bcd13284525923f571c3ec4141dfe10029'
ABI = [ { "constant": True, "inputs": [ { "name": "_numero", "type": "uint256" } ], "name": "getCandidato", "outputs": [ { "name": "", "type": "uint256" }, { "name": "", "type": "string" }, { "name": "", "type": "string" }, { "name": "", "type": "uint256" } ], "payable": False, "stateMutability": "view", "type": "function" }, { "constant": False, "inputs": [ { "name": "_numero", "type": "uint256" } ], "name": "votarCandidato", "outputs": [ { "name": "", "type": "bool" } ], "payable": False, "stateMutability": "nonpayable", "type": "function" }, { "constant": False, "inputs": [ { "name": "_numero", "type": "uint256" }, { "name": "_nome", "type": "string" }, { "name": "_partido", "type": "string" } ], "name": "adicionarCandidato", "outputs": [], "payable": False, "stateMutability": "nonpayable", "type": "function" }, { "constant": True, "inputs": [], "name": "getNumerosDosCandidatos", "outputs": [ { "name": "", "type": "uint256[]" } ], "payable": False, "stateMutability": "view", "type": "function" }, { "inputs": [], "payable": False, "stateMutability": "nonpayable", "type": "constructor" } ]


def deploy_contract():
    # Instantiate and deploy contract
    contract = w3.eth.contract(
        abi=ABI,
        bytecode=BYTECODE
    )

    # Get transaction hash from deployed contract
    tx_hash = contract.deploy(transaction={'from':w3.eth.accounts[1]})

    # Get tx receipt to get contract address
    tx_receipt = w3.eth.getTransactionReceipt(tx_hash)
    return tx_receipt['contractAddress']


# Adiciona o ABI (Application Binary Interface) e o 
# endereço do contrato no arquivo json
with open('./data.json', 'w') as outfile:
    data = {
        "abi": ABI,
        "contract_address": deploy_contract()
    }
    json.dump(data, outfile, indent=4, sort_keys=True)